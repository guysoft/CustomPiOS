#!/usr/bin/env bash
# OctoPi generation script
# This script takes a Raspbian image and adds to it octoprint and verions addons
# Written by Guy Sheffer <guysoft at gmail dot com>
# GPL V3
set -e

export LC_ALL=C

source ${CUSTOM_PI_OS_PATH}/common.sh

function execute_chroot_script() {

  # In docker, these extra commands are required to enable this black-magic
  if [ -f /.dockerenv ] && [ "$(arch)" != "armv7l" ] && [ "$(arch)" != "aarch64" ] ; then
    if [ "$BASE_ARCH" == "armv7l" ]; then
      update-binfmts --enable qemu-arm
    elif [ "$BASE_ARCH" == "aarch64" ] || [ "$BASE_ARCH" == "arm64" ]; then
      update-binfmts --enable qemu-aarch64
    fi
    mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc || true
  fi
  #move filesystem files
  if [ -d "$1/filesystem" ]; then
    cp -vr --preserve=mode,timestamps "$1/filesystem" .
  fi

  #black magic of qemu-arm-static
  # cp `which qemu-arm-static` usr/bin
  if [ "$(arch)" != "armv7l" ] && [ "$(arch)" != "aarch64" ] ; then
    if [ "$BASE_ARCH" == "armv7l" ]; then
      cp `which qemu-arm-static` usr/bin/qemu-arm-static
    elif [ "$BASE_ARCH" == "aarch64" ] || [ "$BASE_ARCH" == "arm64" ]; then
      cp `which qemu-aarch64-static` usr/bin/qemu-aarch64-static
    fi
  fi
  
  cp $2 chroot_script
  chmod 755 chroot_script
  cp "${CUSTOM_PI_OS_PATH}"/common.sh common.sh
  chmod 755 common.sh
  
  if [ "$(arch)" != "armv7l" ] && [ "$(arch)" != "aarch64" ] && [ "$(arch)" != "arm64" ] ; then
    if [ "$BASE_ARCH" == "armv7l" ]; then
      echo "Building on non-ARM device a armv7l system, using qemu-arm-static"
      chroot . usr/bin/qemu-arm-static /bin/bash /chroot_script
    elif [ "$BASE_ARCH" == "aarch64" ] || [ "$BASE_ARCH" == "arm64" ]; then
      echo "Building on non-ARM device a aarch64/arm64 system, using qemu-aarch64-static"
      chroot . usr/bin/qemu-aarch64-static /bin/bash /chroot_script
    fi
  else
    echo "Building on ARM device a armv7l/aarch64/arm64 system, not using qemu"
    chroot . /bin/bash /chroot_script
  fi
  
  # Handle exported items
  if [ -d "custompios_export" ]; then
    echo "Exporting files from chroot"
    echo "List of archies to create:"
    ls custompios_export
    # Tar files listed in export
    for export_list in custompios_export/* ; do
      tar --absolute-names -czvf "${BASE_WORKSPACE}/$(basename ${export_list}).tar.gz" -T ${export_list}
    done
    
    rm -rf custompios_export
  fi
  
  #cleanup
  rm chroot_script
  if [ -d "filesystem" ]; then
    rm -rfv "filesystem"
  fi
}

mkdir -p $BASE_WORKSPACE
mkdir -p $BASE_MOUNT_PATH

# Clean exported artifacts from other builds
rm -rf "${BASE_WORKSPACE}"/*.tar.gz

install_cleanup_trap
install_fail_on_error_trap
unmount_image $BASE_MOUNT_PATH force || true

pushd $BASE_WORKSPACE
  if [ -e *.img ]; then  
    rm *.img
  fi
  if [ ! -f "$BASE_ZIP_IMG" ] || [ "$BASE_ZIP_IMG" == "" ]; then
    echo "Error: could not find image: $BASE_ZIP_IMG"
    exit 1
  fi
  
  if [[ $BASE_ZIP_IMG =~ \.img$ ]]; then
    # if the image is already extracted copy over
    cp "$BASE_ZIP_IMG" .
  else
    7za x -aoa "$BASE_ZIP_IMG"
  fi
  
  BASE_IMG_PATH=`ls | grep '.img$\|.raw$' | head -n 1`
  if [ ! -f "$BASE_IMG_PATH" ]; then
    echo "Error, can't find image path, did you place an image in the image folder?"
    exit 1
  fi
  export CUSTOM_PI_OS_BUILDBASE=$(basename "$BASE_IMG_PATH")

  if [ -n "$BASE_IMAGE_ENLARGEROOT" ]
  then
    # make our image a bit larger so we don't run into size problems...
    enlarge_ext $BASE_IMG_PATH $BASE_ROOT_PARTITION $BASE_IMAGE_ENLARGEROOT
  fi

  # mount root and boot partition
  mount_image $BASE_IMG_PATH $BASE_ROOT_PARTITION $BASE_MOUNT_PATH
  if [ -n "$BASE_APT_CACHE" ] && [ "$BASE_APT_CACHE" != "no" ]
  then
    mkdir -p "$BASE_APT_CACHE"
    mount --bind "$BASE_APT_CACHE" $BASE_MOUNT_PATH/var/cache/apt
  fi

  #Edit pi filesystem
  pushd $BASE_MOUNT_PATH

    #make QEMU boot (remember to return)
    if [ "$BASE_IMAGE_RASPBIAN" == "yes" ]; then
      fixLd
    fi
    #sed -i 's@include /etc/ld.so.conf.d/\*.conf@\#include /etc/ld.so.conf.d/\*.conf@' etc/ld.so.conf
    
    
    ### Execute chroot scripts ###
    
    # if an additional pre-script is defined, execute that now
    if [ -n "$BASE_PRESCRIPT" ] && [ -f $BASE_PRESCRIPT/chroot_script ]; then
      echo "Injecting environment pre script from $BASE_PRESCRIPT..."
      execute_chroot_script $BASE_PRESCRIPT $BASE_PRESCRIPT/chroot_script
    fi

    # if building a variant, execute its pre-chroot script
    if [ -n "$VARIANT_BASE" ] && [ -f $VARIANT_BASE/pre_chroot_script ]; then
      echo "Injecting variant pre script from $VARIANT_BASE..."
      execute_chroot_script $VARIANT_BASE $VARIANT_BASE/pre_chroot_script
    fi
 
    # execute the base chroot script
    ### execute_chroot_script $BASE_SCRIPT_PATH $BASE_CHROOT_SCRIPT_PATH
    CHROOT_SCRIPT=${BASE_WORKSPACE}/chroot_script
    python3 ${CUSTOM_PI_OS_PATH}/execution_order.py "${MODULES}" ${CHROOT_SCRIPT}
    export -f execute_chroot_script
    bash -x "${CHROOT_SCRIPT}"
    
    
    # if building a variant, execute its post-chroot script
    if [ -n "$VARIANT_BASE" ] && [ -f $VARIANT_BASE/post_chroot_script ]; then
      echo "Injecting variant post script from $VARIANT_BASE..."
      execute_chroot_script $VARIANT_BASE $VARIANT_BASE/post_chroot_script
    fi

    # if an additional post-script is defined, execute that now
    if [ -n "$BASE_POSTSCRIPT" ] && [ -f $BASE_POSTSCRIPT/chroot_script ]; then
      echo "Injecting environment post script from $BASE_POSTSCRIPT..."
      execute_chroot_script $BASE_POSTSCRIPT $BASE_POSTSCRIPT/chroot_script
    fi
    
    ### End Execute chroot scripts ###
    if [ "$BASE_IMAGE_RASPBIAN" == "yes" ]; then
      restoreLd
    fi
  popd
  
  # unmount first boot, then root partition
  unmount_image $BASE_MOUNT_PATH
  chmod 777 $BASE_IMG_PATH

  if [ -n "$BASE_IMAGE_RESIZEROOT" ]
  then
    # resize image to minimal size + provided size
    minimize_ext $BASE_IMG_PATH $BASE_ROOT_PARTITION $BASE_IMAGE_RESIZEROOT
  fi
popd

echo_green -e "\nBUILD SUCCEEDED!\n"
